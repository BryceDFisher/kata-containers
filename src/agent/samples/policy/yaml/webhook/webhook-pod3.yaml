---
apiVersion: v1
kind: Namespace
metadata:
  name: emptydir-wrapper-9641
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: emptydir-wrapper-test-434a02c7-a53e-4aaa-aa85-90213274e068
  namespace: emptydir-wrapper-9641
data:
  file1.json: "{key1: value1, key2: value2, key123: value123, 321key: value321}\n"
---
apiVersion: v1
kind: Secret
metadata:
  namespace: emptydir-wrapper-9641
  name: emptydir-wrapper-test-434a02c7-a53e-4aaa-aa85-90213274e068
data:
  data-1: bWVnYV9zZWNyZXRfa2V5Cg==
---
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: ~
  managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        "f:spec":
          "f:containers":
            "k:{\"name\":\"secret-test\"}":
              ".": {}
              "f:args": {}
              "f:image": {}
              "f:imagePullPolicy": {}
              "f:name": {}
              "f:resources": {}
              "f:terminationMessagePath": {}
              "f:terminationMessagePolicy": {}
              "f:volumeMounts":
                ".": {}
                "k:{\"mountPath\":\"/etc/configmap-volume\"}":
                  ".": {}
                  "f:mountPath": {}
                  "f:name": {}
                "k:{\"mountPath\":\"/etc/secret-volume\"}":
                  ".": {}
                  "f:mountPath": {}
                  "f:name": {}
                  "f:readOnly": {}
          "f:dnsPolicy": {}
          "f:enableServiceLinks": {}
          "f:restartPolicy": {}
          "f:schedulerName": {}
          "f:securityContext": {}
          "f:terminationGracePeriodSeconds": {}
          "f:volumes":
            ".": {}
            "k:{\"name\":\"configmap-volume\"}":
              ".": {}
              "f:configMap":
                ".": {}
                "f:defaultMode": {}
                "f:name": {}
              "f:name": {}
            "k:{\"name\":\"secret-volume\"}":
              ".": {}
              "f:name": {}
              "f:secret":
                ".": {}
                "f:defaultMode": {}
                "f:secretName": {}
      manager: e2e.test
      operation: Update
      time: "2023-06-16T17:39:41Z"
  name: pod-secrets-df473706-9a13-4759-84bd-eea6ed2d7b61
  namespace: emptydir-wrapper-9641
  annotations:
    io.katacontainers.config.agent.policy: 
spec:
  runtimeClassName: kata-cc
  containers:
    - args:
        - test-webserver
      image: "registry.k8s.io/e2e-test-images/agnhost:2.40"
      imagePullPolicy: IfNotPresent
      name: secret-test
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
        - mountPath: /etc/secret-volume
          name: secret-volume
          readOnly: true
        - mountPath: /etc/configmap-volume
          name: configmap-volume
        - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
          name: kube-api-access-s2fk4
          readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  preemptionPolicy: PreemptLowerPriority
  priority: 0
  restartPolicy: Always
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
  volumes:
    - name: secret-volume
      secret:
        defaultMode: 420
        secretName: emptydir-wrapper-test-434a02c7-a53e-4aaa-aa85-90213274e068
    - configMap:
        defaultMode: 420
        name: emptydir-wrapper-test-434a02c7-a53e-4aaa-aa85-90213274e068
      name: configmap-volume
    - name: kube-api-access-s2fk4
      projected:
        defaultMode: 420
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              items:
                - key: ca.crt
                  path: ca.crt
              name: kube-root-ca.crt
          - downwardAPI:
              items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
status: {}
